{"version":3,"sources":["services/api.js","components/input/InputStyled.jsx","components/input/Input.jsx","const/validation.js","components/button/ButtonStyled.jsx","components/button/Button.jsx","pages/Login.jsx","actions/index.js","components/badge/BadgeStyle.jsx","components/badge/Badge.jsx","components/Header.jsx","components/Question.jsx","components/timer/TimerStyled.jsx","components/timer/Timer.jsx","pages/Questions.jsx","pages/Ranking.jsx","pages/Feedback.jsx","pages/NotFound.jsx","pages/Settings.jsx","App.jsx","serviceWorker.js","reducers/player.js","reducers/ranking.js","reducers/settings.js","reducers/index.js","store/index.js","index.js","trivia.png"],"names":["mountURL","urlBase","params","url","forEach","param","key","Object","keys","value","values","concat","getToken","a","async","fetch","dataToken","json","getQuestions","token","amount","category","difficulty","urlQuestions","dataQuestions","COLOR_SECONDARY","cssVar","toString","InputCustom","styled","div","props","isFocused","css","shade","Input","state","handleFocus","bind","this","setState","name","type","dataTestId","handleChange","classIcon","className","onFocus","onBlur","onChange","placeholder","aria-label","required","data-testid","autoComplete","Component","defaultProps","PATTERN_EMAIL","COLOR_PRIMARY","ButtonCustom","button","Button","text","handleClick","disabled","id","classListFinal","isRounded","onClick","classList","getSubmit","getButton","Login","email","redirectPlay","redirectSettings","submit","validation","handleRedirect","event","target","nameValidation","length","emailValidation","match","preventDefault","toLogin","saveToken","localStorage","setItem","to","onSubmit","src","trivia","alt","connect","dispatch","assertions","score","payload","gravatarEmail","login","BadgeCustom","Badge","Header","hash","md5","player","logo","convertEmailToHash","Question","getButtonCorrectAnswer","getButtonIncorrectAnswer","index","answer","selected","borderClass","undefined","decode","correctAnswer","incorrectAnswers","sort","selectedAnswer","questionData","question","correct_answer","incorrect_answers","dataAnswers","getQuestion","map","TimerStyled","Timer","timer","startTimer","countDown","upDate","stopTimer","seconds","updateTimer","setInterval","clearInterval","second","Questions","questions","questionIndex","redirectToFeedback","loadQuestions","nextQuestion","time","toLowerCase","scoreDifficulty","getScoreDifficulty","toScore","calculateScore","settings","quantity","loadToken","questionsResponse","results","getItem","getNextButton","setScore","Ranking","redirectToLogin","ranking","b","picture","Feedback","redirectToRanking","getAssertion","toRanking","getBadges","playerData","NotFound","action","Settings","categories","save","loadCategories","getOptionsCategories","handleChangeCategory","handleChangeDifficulty","options","label","toSettings","dataCategories","trivia_categories","getCategories","then","response","option","getSelectCategories","getOptionsDifficulty","App","exact","path","component","Boolean","window","location","hostname","INITIAL_STATE","JSON","stringify","rootReducers","combineReducers","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.0e3da1c0.chunk.js","sourcesContent":["const TOKEN_URL = 'https://opentdb.com/api_token.php?command=request';\nconst QUESTIONS_URL = 'https://opentdb.com/api.php?';\nconst CATEGORIES_URL = 'https://opentdb.com/api_category.php';\nconst INITIAL_AMOUNT = 5;\n\nconst mountURL = (urlBase, params) => {\n  let url = urlBase;\n  params.forEach((param) => {\n    const key = Object.keys(param);\n    const value = Object.values(param);\n    if (value) url = url.concat(`&${key}=`, value);\n  });\n  return url;\n};\n\nconst getToken = async () => {\n  const dataToken = await fetch(TOKEN_URL);\n  return dataToken.json();\n};\n\nconst getQuestions = async (token, amount = INITIAL_AMOUNT,\n  category = '', difficulty = '') => {\n  const params = [{ category }, { difficulty }, { amount }, { token }];\n  const urlQuestions = mountURL(QUESTIONS_URL, params);\n\n  const dataQuestions = await fetch(urlQuestions);\n  return dataQuestions.json();\n};\n\nconst getCategories = async () => {\n  const dataCategories = await fetch(CATEGORIES_URL);\n  const categories = await dataCategories.json();\n  return categories.trivia_categories;\n};\n\nexport {\n  getToken,\n  getQuestions,\n  getCategories,\n};\n","import styled, { css } from 'styled-components';\nimport { cssVar, shade } from 'polished';\n\nconst SHADOW_DEFAULT = 0.1;\nconst COLOR_SECONDARY = cssVar('--color-secondary', '#F65A5B').toString();\n\nconst InputCustom = styled.div`\n  background-color: var(--color-white);\n  border: 2px solid var(--color-white);\n  border-radius: 8px;\n  width: 100%;\n  padding-left: 16px;\n  margin-bottom: 8px;\n  display: flex;\n  align-items: center;\n\n  & + div {\n    margin-top: 8px;\n  }\n\n  i {\n    font-size: 1.25rem;\n    color: var(--color-primary);\n  }\n  \n  input {\n    background-color: transparent;\n    color: var(--color-primary);\n    flex: 1;\n    border: 0;\n    box-shadow: none;\n    outline: none;\n    padding: 16px;\n  }\n  \n  input::placeholder {\n    text-transform: capitalize;\n  }\n\n  ${(props) => props.isFocused && css`\n    border: 2px solid var(--color-primary);\n\n    i {\n      color: ${shade(SHADOW_DEFAULT, COLOR_SECONDARY)};\n    }\n  `}\n`;\n\nexport default InputCustom;\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport InputCustom from './InputStyled';\r\n\r\nclass Input extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isFocused: false,\r\n    };\r\n\r\n    this.handleFocus = this.handleFocus.bind(this);\r\n  }\r\n\r\n  handleFocus() {\r\n    this.setState(({ isFocused }) => ({\r\n      isFocused: !isFocused,\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    const { name, type, dataTestId, handleChange, classIcon } = this.props;\r\n    const { isFocused } = this.state;\r\n\r\n    return (\r\n      <InputCustom isFocused={ isFocused }>\r\n        <i className={ `${classIcon}` } />\r\n        <input\r\n          name={ name }\r\n          onFocus={ this.handleFocus }\r\n          onBlur={ this.handleFocus }\r\n          onChange={ handleChange }\r\n          type={ type }\r\n          placeholder={ name }\r\n          aria-label={ name }\r\n          required\r\n          data-testid={ dataTestId }\r\n          autoComplete=\"off\"\r\n        />\r\n      </InputCustom>\r\n    );\r\n  }\r\n}\r\n\r\nInput.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  type: PropTypes.string,\r\n  dataTestId: PropTypes.string,\r\n  handleChange: PropTypes.func.isRequired,\r\n  classIcon: PropTypes.string,\r\n};\r\n\r\nInput.defaultProps = {\r\n  type: 'text',\r\n  dataTestId: '',\r\n  classIcon: '',\r\n};\r\n\r\nexport default Input;\r\n","// Link do código do regex: https://regexr.com/2ri2c\r\nconst PATTERN_EMAIL = /\\b[\\w.-]+@[\\w.-]+\\.\\w{2,4}\\b/gi;\r\nconst NAME_LENGTH = 3;\r\n\r\nexport {\r\n  PATTERN_EMAIL,\r\n  NAME_LENGTH,\r\n};\r\n","import styled from 'styled-components';\r\nimport { cssVar, shade } from 'polished';\r\n\r\nconst SHADOW_DEFAULT = 0.1;\r\nconst SHADOW_DISABLED = 0.4;\r\nconst COLOR_PRIMARY = cssVar('--color-primary', '#204056').toString();\r\nconst COLOR_SECONDARY = cssVar('--color-secondary', '#F65A5B').toString();\r\n\r\nconst ButtonCustom = styled.button`\r\n  padding: 12px 16px;\r\n  font-weight: 700;\r\n  border: none;\r\n  border-radius: 8px;\r\n  margin-top: 8px;\r\n  width: 100%;\r\n  \r\n  &:hover, &:active {\r\n    background-color: ${shade(SHADOW_DEFAULT, COLOR_PRIMARY)};\r\n    color: var(--color-white);\r\n  }\r\n  \r\n  &.button-primary {\r\n    background-color: var(--color-primary);\r\n    color: var(--color-white);\r\n  }\r\n\r\n  &.button-primary:hover {\r\n    background-color: ${shade(SHADOW_DEFAULT, COLOR_PRIMARY)};\r\n  }\r\n\r\n  &.button-primary:disabled {\r\n    background-color: ${shade(SHADOW_DISABLED, COLOR_PRIMARY)};\r\n  }\r\n\r\n  &.button-outline-primary {\r\n    background: var(--color-primary);\r\n    color: var(--color-primary);\r\n    border: 1px solid var(--color-primary);\r\n  }\r\n\r\n  &.button-outline-primary:hover {\r\n    color: ${shade(SHADOW_DEFAULT, COLOR_PRIMARY)};\r\n  }\r\n\r\n  &.button-outline-primary:disabled {\r\n    color: ${shade(SHADOW_DISABLED, COLOR_PRIMARY)};\r\n  }\r\n\r\n  &.button-secondary {\r\n    background-color: var(--color-secondary);\r\n    color: var(--color-white);\r\n    border: 1px solid var(--color-secondary);\r\n  }\r\n\r\n  &.button-secondary:hover {\r\n    background-color: ${shade(SHADOW_DEFAULT, COLOR_SECONDARY)};\r\n  }\r\n\r\n  &.button-secondary:disabled {\r\n    background-color: ${shade(SHADOW_DISABLED, COLOR_SECONDARY)};\r\n  }\r\n\r\n  &.button-outline-primary {\r\n    background: transparent;\r\n    color: var(--color-primary);\r\n    border: 2px solid var(--color-primary);\r\n  }\r\n\r\n  &.button-outline-primary:hover {\r\n    background-color: var(--color-primary);\r\n    color: var(--color-white);\r\n  }\r\n\r\n  &.button-outline-primary:disabled {\r\n    color: ${shade(SHADOW_DISABLED, COLOR_PRIMARY)};\r\n  }\r\n\r\n  &.button-outline-secondary {\r\n    background: var(--color-primary);\r\n    color: var(--color-secondary);\r\n    border: 2px solid var(--color-secondary);\r\n  }\r\n\r\n  &.button-outline-secondary:hover {\r\n    background-color: var(--color-secondary);\r\n    color: var(--color-white);\r\n  }\r\n\r\n  &.button-outline-secondary:disabled {\r\n    color: ${shade(SHADOW_DISABLED, COLOR_SECONDARY)};\r\n  }\r\n  \r\n  &.rounded {\r\n    width: initial;\r\n    font-size: 1.25rem;\r\n    margin: 0;\r\n    border-radius: 50%;\r\n  }\r\n  \r\n  &.border-incorrect {\r\n    border: 3px solid red;\r\n  }\r\n\r\n  &.border-correct {\r\n    border: 3px solid rgb(6, 240, 15);\r\n  }\r\n`;\r\n\r\nexport default ButtonCustom;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ButtonCustom from './ButtonStyled';\r\n\r\nclass Button extends Component {\r\n  getSubmit() {\r\n    const { text, dataTestId, handleClick, disabled, classIcon, key, id } = this.props;\r\n    const classListFinal = this.isRounded();\r\n    return (\r\n      <ButtonCustom\r\n        key={ key }\r\n        id={ id }\r\n        className={ classListFinal }\r\n        onClick={ handleClick }\r\n        type=\"submit\"\r\n        data-testid={ dataTestId }\r\n        disabled={ disabled }\r\n      >\r\n        { text }\r\n        <i className={ `${classIcon}` } />\r\n      </ButtonCustom>\r\n    );\r\n  }\r\n\r\n  getButton() {\r\n    const { text, dataTestId, handleClick, disabled, classIcon, key, id } = this.props;\r\n    const classListFinal = this.isRounded();\r\n    return (\r\n      <ButtonCustom\r\n        key={ key }\r\n        id={ id }\r\n        className={ classListFinal }\r\n        onClick={ handleClick }\r\n        type=\"button\"\r\n        data-testid={ dataTestId }\r\n        disabled={ disabled }\r\n      >\r\n        { text }\r\n        <i className={ `${classIcon}` } />\r\n      </ButtonCustom>\r\n    );\r\n  }\r\n\r\n  isRounded() {\r\n    const { isRounded, classList } = this.props;\r\n    if (isRounded) {\r\n      return classList.concat(' rounded');\r\n    }\r\n    return classList;\r\n  }\r\n\r\n  render() {\r\n    const { type } = this.props;\r\n    return type === 'submit' ? this.getSubmit() : this.getButton();\r\n  }\r\n}\r\n\r\nButton.propTypes = {\r\n  id: PropTypes.string,\r\n  key: PropTypes.string.isRequired,\r\n  text: PropTypes.string,\r\n  type: PropTypes.string.isRequired,\r\n  dataTestId: PropTypes.string,\r\n  handleClick: PropTypes.func,\r\n  classIcon: PropTypes.string,\r\n  disabled: PropTypes.string,\r\n  classList: PropTypes.string.isRequired,\r\n  isRounded: PropTypes.bool,\r\n};\r\n\r\nButton.defaultProps = {\r\n  id: '',\r\n  text: '',\r\n  classIcon: '',\r\n  dataTestId: '',\r\n  handleClick: () => {},\r\n  disabled: false,\r\n  isRounded: false,\r\n};\r\n\r\nexport default Button;\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router';\nimport { login } from '../actions';\nimport { getToken } from '../services/api';\nimport trivia from '../trivia.png';\nimport Input from '../components/input/Input';\nimport { PATTERN_EMAIL, NAME_LENGTH } from '../const/validation';\nimport Button from '../components/button/Button';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      email: '',\n      redirectPlay: false,\n      redirectSettings: false,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.submit = this.submit.bind(this);\n    this.validation = this.validation.bind(this);\n    this.handleRedirect = this.handleRedirect.bind(this);\n  }\n\n  handleChange(event) {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  handleRedirect() {\n    this.setState({ redirectSettings: true });\n  }\n\n  validation() {\n    const { name, email } = this.state;\n    const nameValidation = name.length >= NAME_LENGTH;\n    const emailValidation = email.match(PATTERN_EMAIL);\n    return !(nameValidation && emailValidation);\n  }\n\n  async submit(event) {\n    event.preventDefault();\n    const { name, email } = this.state;\n    const { toLogin } = this.props;\n\n    toLogin(name, email);\n    await this.saveToken();\n\n    this.setState({ redirectPlay: true });\n  }\n\n  async saveToken() {\n    const { token } = await getToken();\n    localStorage.setItem('token', token);\n  }\n\n  render() {\n    const { redirectPlay, redirectSettings } = this.state;\n    if (redirectPlay) return <Redirect to=\"/questions\" />;\n    if (redirectSettings) return <Redirect to=\"/settings\" />;\n    return (\n      <section className=\"container login-container\">\n        <Button\n          type=\"button\"\n          classIcon=\"bi bi-gear\"\n          handleClick={ this.handleRedirect }\n          dataTestId=\"btn-settings\"\n          classList=\"button-outline-secondary\"\n          isRounded\n          key=\"settings\"\n        />\n        <form onSubmit={ this.submit }>\n          <img src={ trivia } alt=\"logo trivia\" className=\"trivia-logo\" />\n          <Input\n            name=\"name\"\n            type=\"text\"\n            dataTestId=\"input-player-name\"\n            handleChange={ this.handleChange }\n            classIcon=\"bi bi-person-circle\"\n          />\n          <Input\n            name=\"email\"\n            type=\"email\"\n            dataTestId=\"input-gravatar-email\"\n            handleChange={ this.handleChange }\n            classIcon=\"bi bi-envelope\"\n          />\n          <Button\n            text=\"Jogar\"\n            type=\"submit\"\n            dataTestId=\"btn-play\"\n            disabled={ this.validation() }\n            classList=\"button-primary\"\n            key=\"Jogar\"\n          />\n        </form>\n      </section>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  toLogin: (name, email) => dispatch(login(name, email)),\n});\n\nLogin.propTypes = {\n  toLogin: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","const PLAYER = 'PLAYER';\nconst RANKING = 'RANKING';\nconst SCORE = 'SCORE';\nconst SETTINGS = 'SETTINGS';\n\nconst login = (name, email, assertions = 0, score = 0) => ({\n  type: PLAYER,\n  payload: {\n    name,\n    gravatarEmail: email,\n    assertions,\n    score,\n  },\n});\n\nconst setScore = (assertions, score) => ({\n  type: SCORE,\n  payload: {\n    assertions,\n    score,\n  },\n});\n\nconst setSettings = ({ category, quantity, difficulty }) => ({\n  type: SETTINGS,\n  payload: {\n    category,\n    quantity,\n    difficulty,\n  },\n});\n\nconst setRanking = ({ name, score, picture }) => ({\n  type: RANKING,\n  payload: {\n    name,\n    score,\n    picture,\n  },\n});\n\nexport {\n  PLAYER,\n  RANKING,\n  SCORE,\n  SETTINGS,\n  login,\n  setScore,\n  setSettings,\n  setRanking,\n};\n","import styled from 'styled-components';\r\n\r\nconst BadgeCustom = styled.div`\r\n  color: var(--color-white);\r\n  padding: 8px 0 8px 0;\r\n  border-radius: 8px;\r\n  display: flex;\r\n  flex-flow: row;\r\n  align-items: center;\r\n  \r\n  &.badge-primary > span:first-child {\r\n    background-color: var(--color-primary);\r\n  }\r\n\r\n  &.badge-primary > span:last-child {\r\n    background-color: var(--color-secondaryy);\r\n  }\r\n\r\n  &.badge-secondary > span:first-child {\r\n    background-color: var(--color-secondary);\r\n  }\r\n\r\n  &.badge-secondary > span:last-child {\r\n    background-color: var(--color-primary);\r\n  }\r\n\r\n  &.badge-primary-white > span:first-child {\r\n    background-color: var(--color-primary);\r\n  }\r\n  \r\n  &.badge-primary-white > span:last-child {\r\n    background-color: var(--color-white);\r\n    color: var(--color-primary);\r\n  }\r\n  \r\n  span {\r\n    padding: 8px 12px;\r\n  }\r\n  \r\n  span:first-child {\r\n    font-weight: 700;\r\n    border-radius: 8px 0 0 8px;\r\n    flex-basis: 130px;\r\n    flex-grow: 0;\r\n  }\r\n  \r\n  span:last-child {\r\n    border-radius: 0 8px 8px 0;\r\n    flex-grow: 1;\r\n    white-space:nowrap;\r\n    overflow:hidden;\r\n    text-overflow:ellipsis;\r\n  }\r\n  \r\n  i {\r\n    margin-right: 8px;\r\n  }\r\n\r\n  &.exact {\r\n    padding: 0;\r\n  }\r\n  \r\n  &.exact > span {\r\n    flex-basis: initial;\r\n    flex-grow: 0;\r\n  }\r\n  \r\n  &.small > span {\r\n    font-size: 12px;\r\n  }\r\n  \r\n  &.no-icon i {\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nexport default BadgeCustom;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport BadgeCustom from './BadgeStyle';\r\n\r\nclass Badge extends Component {\r\n  render() {\r\n    const { dataTestId, text, value, classIcon, classList } = this.props;\r\n\r\n    return (\r\n      <BadgeCustom className={ classList }>\r\n        <span>\r\n          <i className={ classIcon } />\r\n          {text}\r\n        </span>\r\n        <span data-testid={ dataTestId }>{value}</span>\r\n      </BadgeCustom>\r\n    );\r\n  }\r\n}\r\n\r\nBadge.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n  classList: PropTypes.string.isRequired,\r\n  dataTestId: PropTypes.string,\r\n  classIcon: PropTypes.string,\r\n  value: PropTypes.string.isRequired,\r\n};\r\n\r\nBadge.defaultProps = {\r\n  dataTestId: '',\r\n  classIcon: '',\r\n};\r\n\r\nexport default Badge;\r\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport Badge from './badge/Badge';\nimport logo from '../trivia.png';\n\nclass Header extends Component {\n  convertEmailToHash(email) {\n    const hash = md5(email).toString();\n    return `https://www.gravatar.com/avatar/${hash}`;\n  }\n\n  render() {\n    const { player: { name, gravatarEmail, score } } = this.props;\n    return (\n      <header>\n        <div className=\"container\">\n          <img\n            src={ logo }\n            alt=\"Logo do Trivia\"\n          />\n          <div className=\"box-score\">\n            <img\n              src={ this.convertEmailToHash(gravatarEmail) }\n              alt=\"Avatar do Player\"\n              data-testid=\"header-profile-picture\"\n            />\n            <div className=\"box-score-badges\">\n              <Badge\n                text=\"Jogador\"\n                value={ name }\n                classList=\"badge-secondary\"\n                classIcon=\"bi bi-person-fill\"\n                dataTestId=\"header-player-name\"\n              />\n              <Badge\n                text=\"Score\"\n                value={ score }\n                classIcon=\"bi bi-trophy-fill\"\n                classList=\"badge-secondary\"\n                dataTestId=\"header-score\"\n              />\n            </div>\n          </div>\n        </div>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  player: state.player,\n});\n\nHeader.propTypes = {\n  player: PropTypes.shape({\n    name: PropTypes.string,\n    gravatarEmail: PropTypes.string,\n    score: PropTypes.number,\n  }).isRequired,\n};\n\nexport default connect(mapStateToProps)(Header);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { decode } from 'he';\nimport Button from './button/Button';\nimport Badge from './badge/Badge';\n\nclass Question extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n    this.getButtonCorrectAnswer = this.getButtonCorrectAnswer.bind(this);\n    this.getButtonIncorrectAnswer = this.getButtonIncorrectAnswer.bind(this);\n  }\n\n  getButtonCorrectAnswer(index, answer) {\n    const { selected } = this.props;\n    let borderClass = '';\n    if (selected !== undefined) borderClass = 'border-correct';\n    return (\n      <div>\n        <Button\n          id=\"correct-answer\"\n          classList={ borderClass }\n          dataTestId=\"correct-answer\"\n          type=\"button\"\n          handleClick={ this.handleClick }\n          value={ answer }\n          disabled={ selected }\n          text={ decode(answer) }\n          key=\"correct-answer-button\"\n        />\n      </div>\n    );\n  }\n\n  getButtonIncorrectAnswer(index, answer) {\n    const { selected } = this.props;\n    let borderClass = '';\n    if (selected !== undefined) borderClass = 'border-incorrect';\n    return (\n      <div>\n        <Button\n          key={ index }\n          id=\"incorrect-answer\"\n          classList={ borderClass }\n          dataTestId={ `wrong-answer-${index}` }\n          type=\"button\"\n          handleClick={ this.handleClick }\n          value={ answer }\n          disabled={ selected }\n          text={ decode(answer) }\n        />\n      </div>\n    );\n  }\n\n  getQuestion(correctAnswer, incorrectAnswers) {\n    return [correctAnswer, ...incorrectAnswers].sort();\n  }\n\n  handleClick(event) {\n    const { selectedAnswer } = this.props;\n    selectedAnswer(event);\n  }\n\n  render() {\n    const { questionData } = this.props;\n    const { category, question, difficulty } = questionData;\n    const correctAnswer = questionData.correct_answer;\n    const incorrectAnswers = questionData.incorrect_answers;\n\n    const dataAnswers = this.getQuestion(correctAnswer, incorrectAnswers);\n\n    return (\n      <div>\n        <h2 data-testid=\"question-text\">{decode(question)}</h2>\n        { dataAnswers.map((answer, index) => {\n          if (answer === correctAnswer) {\n            return this.getButtonCorrectAnswer(index, answer);\n          }\n          return this.getButtonIncorrectAnswer(index, answer);\n        })}\n        <div className=\"box-question-opt\">\n          <Badge\n            text=\"Category\"\n            value={ category }\n            classList=\"badge-primary-white exact small no-icon\"\n            dataTestId=\"question-category\"\n          />\n          <Badge\n            text=\"Difficulty\"\n            value={ difficulty }\n            classList=\"badge-primary-white exact small no-icon\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nQuestion.propTypes = {\n  questionData: PropTypes.shape({\n    category: PropTypes.string,\n    question: PropTypes.string,\n    correct_answer: PropTypes.string,\n    difficulty: PropTypes.string,\n    incorrect_answers: PropTypes.arrayOf(PropTypes.string),\n  }).isRequired,\n  selected: PropTypes.bool.isRequired,\n  selectedAnswer: PropTypes.func.isRequired,\n};\n\nexport default Question;\n","import styled from 'styled-components';\r\n\r\nconst TimerStyled = styled.div`\r\n  font-weight: 700;\r\n  border: 1px solid var(--color-secondary);\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  float: right;\r\n`;\r\n\r\nexport default TimerStyled;\r\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport TimerStyled from './TimerStyled';\nimport Badge from '../badge/Badge';\n\n// parte do codigo retirada de:\n// https://stackoverflow.com/questions/40885923/countdown-timer-in-react\n\nclass Timer extends Component {\n  constructor() {\n    super();\n\n    this.timer = 0;\n    this.startTimer = this.startTimer.bind(this);\n    this.countDown = this.countDown.bind(this);\n    this.upDate = this.upDate.bind(this);\n  }\n\n  componentDidMount() {\n    this.upDate();\n  }\n\n  componentDidUpdate() {\n    const { selected } = this.props;\n    if (selected === true) this.stopTimer();\n  }\n\n  upDate() {\n    const { seconds, updateTimer } = this.props;\n    updateTimer(seconds);\n  }\n\n  startTimer() {\n    const { seconds } = this.props;\n    const n = 1000;\n    if (this.timer === 0 && seconds > 0) {\n      this.timer = setInterval(this.countDown, n);\n    }\n  }\n\n  stopTimer() {\n    clearInterval(this.timer);\n    this.timer = 0;\n  }\n\n  countDown() {\n    // Remove one second, set state so a re-render happens.\n    const { seconds, updateTimer } = this.props;\n    const second = seconds - 1;\n    updateTimer(second);\n    // Check if we're at zero.\n    if (second === 0) {\n      clearInterval(this.timer);\n    }\n  }\n\n  render() {\n    const { seconds } = this.props;\n    this.startTimer();\n    return (\n      <TimerStyled>\n        <Badge\n          text=\"\"\n          value={ seconds }\n          classList=\"badge-primary-white exact no-icon\"\n          classIcon=\"bi bi-stopwatch-fill\"\n        />\n      </TimerStyled>\n    );\n  }\n}\n\nTimer.propTypes = {\n  selected: PropTypes.bool.isRequired,\n  seconds: PropTypes.number.isRequired,\n  updateTimer: PropTypes.func.isRequired,\n};\n\nexport default Timer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport Question from '../components/Question';\nimport { getQuestions } from '../services/api';\nimport Timer from '../components/timer/Timer';\nimport { setScore } from '../actions';\nimport Button from '../components/button/Button';\n\nclass Questions extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questions: undefined,\n      questionIndex: 0,\n      selected: undefined,\n      seconds: 30,\n      redirectToFeedback: false,\n    };\n\n    this.score = 0;\n    this.assertions = 0;\n    this.loadQuestions = this.loadQuestions.bind(this);\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.selectedAnswer = this.selectedAnswer.bind(this);\n    this.updateTimer = this.updateTimer.bind(this);\n    this.time = this.time.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadQuestions();\n  }\n\n  getNextButton() {\n    const { questionIndex, questions } = this.state;\n    if (questionIndex >= questions.length - 1) {\n      return (\n        <Button\n          text=\"Finalizar\"\n          type=\"button\"\n          dataTestId=\"btn-next\"\n          handleClick={ () => this.setState({ redirectToFeedback: true }) }\n          classList=\"button-primary\"\n          key=\"Finalizar\"\n        />\n      );\n    }\n    return (\n      <Button\n        text=\"Proximo\"\n        type=\"button\"\n        dataTestId=\"btn-next\"\n        handleClick={ this.nextQuestion }\n        classList=\"button-primary\"\n        key=\"Proximo\"\n      />\n    );\n  }\n\n  getScoreDifficulty(difficulty) {\n    const easy = 1;\n    const medium = 2;\n    const hard = 3;\n\n    switch (difficulty.toLowerCase()) {\n    case 'easy':\n      return easy;\n    case 'medium':\n      return medium;\n    case 'hard':\n      return hard;\n    default:\n      return easy;\n    }\n  }\n\n  calculateScore(event) {\n    const { seconds, questions, questionIndex } = this.state;\n    const { id } = event.target;\n    const { difficulty } = questions[questionIndex];\n    const defaultScore = 10;\n\n    if (id === 'correct-answer') {\n      const scoreDifficulty = this.getScoreDifficulty(difficulty);\n      this.assertions += 1;\n      this.score += defaultScore + (seconds * scoreDifficulty);\n    }\n\n    const { toScore } = this.props;\n    toScore(this.assertions, this.score);\n  }\n\n  nextQuestion() {\n    this.setState(({ questionIndex }) => ({\n      questionIndex: questionIndex + 1,\n      selected: undefined,\n      seconds: 30,\n    }));\n  }\n\n  updateTimer(seconds) {\n    this.setState({ seconds });\n    if (seconds === 0) {\n      this.setState({ selected: true });\n    }\n  }\n\n  time() {\n    const { seconds, selected } = this.state;\n    return (<Timer\n      seconds={ seconds }\n      selected={ selected }\n      updateTimer={ this.updateTimer }\n    />);\n  }\n\n  selectedAnswer(event) {\n    this.setState({ selected: true });\n    this.calculateScore(event);\n  }\n\n  async loadQuestions() {\n    const { settings } = this.props;\n    const { category, quantity, difficulty } = settings;\n    const token = this.loadToken();\n    const questionsResponse = await getQuestions(token, quantity, category, difficulty);\n    this.setState({\n      questions: questionsResponse.results,\n    });\n  }\n\n  loadToken() {\n    return localStorage.getItem('token');\n  }\n\n  render() {\n    const { questions, questionIndex, selected, redirectToFeedback } = this.state;\n\n    if (redirectToFeedback) {\n      return <Redirect to=\"/feedback\" />;\n    }\n\n    return (\n      <>\n        <Header />\n        <div className=\"container box-accent\">\n          { this.time() }\n          { questions\n          && <Question\n            nextQuestion={ this.nextQuestion }\n            questionData={ questions[questionIndex] }\n            selected={ selected }\n            selectedAnswer={ this.selectedAnswer }\n          /> }\n          { selected && this.getNextButton() }\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  toScore: (assertions, score) => dispatch(setScore(assertions, score)),\n});\n\nconst mapStateToProps = (state) => ({\n  settings: state.settings,\n});\n\nQuestions.propTypes = {\n  toScore: PropTypes.func.isRequired,\n  settings: PropTypes.shape({\n    category: PropTypes.string.isRequired,\n    quantity: PropTypes.number.isRequired,\n    difficulty: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport PropTypes from 'prop-types';\nimport Button from '../components/button/Button';\n\nclass Ranking extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      redirectToLogin: false,\n    };\n    this.redirectToLogin = this.redirectToLogin.bind(this);\n  }\n\n  redirectToLogin() {\n    this.setState({ redirectToLogin: true });\n  }\n\n  render() {\n    const { ranking } = this.props;\n    const { redirectToLogin } = this.state;\n    if (redirectToLogin) return <Redirect to=\"/\" />;\n    return (\n      <div className=\"container box-accent box-feedback\">\n        <h1 data-testid=\"ranking-title\"> Ranking </h1>\n        <ul>\n          { ranking\n            .sort((a, b) => b.score - a.score)\n            .map(({ name, score, picture }, index) => (\n              <li key={ `${index}ª Posição` }>\n                <div>\n                  <img src={ picture } alt=\"Avatar do Player\" />\n                </div>\n                <span data-testid={ `player-name-${index}` }>{ name }</span>\n                <span data-testid={ `player-score-${index}` }>{ score }</span>\n              </li>\n            ))}\n        </ul>\n        <div className=\"box-feedback-button\">\n          <Button\n            text=\"Jogar novamente\"\n            key=\"button-play-again\"\n            type=\"button\"\n            classList=\"button-primary\"\n            dataTestId=\"btn-go-home\"\n            handleClick={ this.redirectToLogin }\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  ranking: state.ranking,\n});\n\nRanking.propTypes = {\n  ranking: PropTypes.arrayOf({\n    name: PropTypes.string,\n    score: PropTypes.number,\n    picture: PropTypes.string,\n  }).isRequired,\n};\n\nexport default connect(mapStateToProps, null)(Ranking);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport PropTypes from 'prop-types';\nimport md5 from 'crypto-js/md5';\nimport Header from '../components/Header';\nimport Badge from '../components/badge/Badge';\nimport Button from '../components/button/Button';\nimport { setRanking } from '../actions';\n\nclass Feedback extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      redirectToLogin: false,\n      redirectToRanking: false,\n    };\n\n    this.getAssertion = this.getAssertion.bind(this);\n    this.redirectToLogin = this.redirectToLogin.bind(this);\n    this.redirectToRanking = this.redirectToRanking.bind(this);\n  }\n\n  getAssertion() {\n    const { player: { assertions } } = this.props;\n    const n = 3;\n    if (assertions >= n) {\n      return 'Mandou bem!';\n    }\n    if (assertions < n) {\n      return 'Podia ser melhor...';\n    }\n  }\n\n  getAssertionsText(assertions) {\n    switch (assertions) {\n    case 0:\n      return 'Não acertou nenhuma pergunta';\n    default:\n      return `Acertou ${assertions} perguntas`;\n    }\n  }\n\n  getBadges(score, assertions) {\n    return (\n      <div className=\"box-feedback-score\">\n        <Badge\n          text=\"Score\"\n          value={ score }\n          classList=\"badge-primary-white\"\n          dataTestId=\"feedback-total-score\"\n          classIcon=\"bi bi-trophy-fill\"\n        />\n        <Badge\n          text=\"Assertions\"\n          value={ assertions }\n          classList=\"badge-primary-white\"\n          dataTestId=\"feedback-total-question\"\n          classIcon=\"bi bi-bullseye\"\n        />\n      </div>\n    );\n  }\n\n  convertEmailToHash(email) {\n    const hash = md5(email).toString();\n    return `https://www.gravatar.com/avatar/${hash}`;\n  }\n\n  redirectToRanking() {\n    const { player: { name, score, gravatarEmail }, toRanking } = this.props;\n    const picture = this.convertEmailToHash(gravatarEmail);\n    const toRankingData = { name, score, picture };\n    toRanking(toRankingData);\n    this.setState({ redirectToRanking: true });\n  }\n\n  redirectToLogin() {\n    this.setState({ redirectToLogin: true });\n  }\n\n  render() {\n    const { player: { score, assertions } } = this.props;\n    const { redirectToLogin, redirectToRanking } = this.state;\n    if (redirectToLogin) return <Redirect to=\"/\" />;\n    if (redirectToRanking) return <Redirect to=\"/ranking\" />;\n    return (\n      <>\n        <Header />\n        <div className=\"container box-accent box-feedback\">\n          <h1> Feedback </h1>\n          <div className=\"box-feedback__flex\">\n            {this.getBadges(score, assertions)}\n            <div className=\"box-feedback-assertions\">\n              <p data-testid=\"feedback-text\">{ this.getAssertion() }</p>\n            </div>\n          </div>\n          <div className=\"box-feedback-button\">\n            <Button\n              text=\"Ranking\"\n              key=\"button-ranking\"\n              type=\"button\"\n              classList=\"button-outline-primary\"\n              dataTestId=\"btn-ranking\"\n              handleClick={ this.redirectToRanking }\n            />\n            <Button\n              text=\"Jogar novamente\"\n              key=\"button-play-again\"\n              type=\"button\"\n              classList=\"button-primary\"\n              dataTestId=\"btn-play-again\"\n              handleClick={ this.redirectToLogin }\n            />\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  player: state.player,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  toRanking: (playerData) => dispatch(setRanking(playerData)),\n});\n\nFeedback.propTypes = {\n  player: PropTypes.shape({\n    name: PropTypes.string,\n    gravatarEmail: PropTypes.string,\n    score: PropTypes.number,\n    assertions: PropTypes.number,\n  }).isRequired,\n  toRanking: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Feedback);\n","import React, { Component } from 'react';\nimport Header from '../components/Header';\n\nclass NotFound extends Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <div className=\"d-flex justify-content-center align-items-center\">\n          <div className=\"error\" />\n        </div>\n        <form action=\"/\">\n          <button type=\"submit\" className=\"btn-error\">Voltar ao Início</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default NotFound;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport Dropdown from 'react-dropdown';\nimport { getCategories } from '../services/api';\nimport { setSettings } from '../actions';\nimport Input from '../components/input/Input';\nimport 'react-dropdown/style.css';\nimport Button from '../components/button/Button';\n\nclass Settings extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      categories: undefined,\n      category: 9,\n      difficulty: 'easy',\n      quantity: 5,\n      save: false,\n    };\n\n    this.loadCategories = this.loadCategories.bind(this);\n    this.getOptionsCategories = this.getOptionsCategories.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleChangeCategory = this.handleChangeCategory.bind(this);\n    this.handleChangeDifficulty = this.handleChangeDifficulty.bind(this);\n    this.save = this.save.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadCategories();\n  }\n\n  getSelectCategories() {\n    return (\n      <Dropdown\n        name=\"category\"\n        onChange={ this.handleChangeCategory }\n        options={ this.getOptionsCategories() }\n        placeholder=\"Selecione uma categoria\"\n      />\n    );\n  }\n\n  getOptionsCategories() {\n    const { categories } = this.state;\n    return categories\n      .map((category) => ({ value: category.id, label: category.name }));\n  }\n\n  getOptionsDifficulty() {\n    return ['easy', 'medium', 'hard'];\n  }\n\n  save() {\n    const { category, quantity, difficulty } = this.state;\n    const settings = {\n      category, difficulty, quantity,\n    };\n\n    const { toSettings } = this.props;\n    toSettings(settings);\n\n    this.setState({ save: true });\n  }\n\n  loadCategories() {\n    getCategories().then((response) => {\n      this.setState({ categories: response });\n    });\n  }\n\n  handleChange(event) {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  handleChangeCategory(option) {\n    this.setState({ category: option.value });\n  }\n\n  handleChangeDifficulty(option) {\n    this.setState({ difficulty: option.value });\n  }\n\n  render() {\n    const { categories, save } = this.state;\n\n    if (save) {\n      return <Redirect to=\"/\" />;\n    }\n\n    return (\n      <section className=\"container login-container\">\n        <h1 data-testid=\"settings-title\"> Configurações </h1>\n        <form>\n          <Input name=\"quantity\" handleChange={ this.handleChange } />\n          { categories && this.getSelectCategories() }\n          <Dropdown\n            name=\"difficulty\"\n            onChange={ this.handleChangeDifficulty }\n            options={ this.getOptionsDifficulty() }\n            placeholder=\"Selecione uma dificuldade\"\n          />\n          <Button\n            text=\"Salvar\"\n            type=\"button\"\n            handleClick={ this.save }\n            classList=\"button-primary\"\n            key=\"Salvar-Settings\"\n          />\n        </form>\n      </section>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  toSettings: (settings) => dispatch(setSettings(settings)),\n});\n\nSettings.propTypes = {\n  toSettings: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Settings);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Questions from './pages/Questions';\nimport Ranking from './pages/Ranking';\nimport Feedback from './pages/Feedback';\nimport NotFound from './pages/NotFound';\nimport Settings from './pages/Settings';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route exact path=\"/questions\" component={ Questions } />\n      <Route exact path=\"/ranking\" component={ Ranking } />\n      <Route exact path=\"/feedback\" component={ Feedback } />\n      <Route exact path=\"/settings\" component={ Settings } />\n      <Route path=\"*\" component={ NotFound } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { SCORE, PLAYER } from '../actions';\n\nconst INITIAL_STATE = {\n  name: '',\n  gravatarEmail: '',\n  assertions: 0,\n  score: 0,\n};\n\nconst player = (state = INITIAL_STATE, action) => {\n  const { type, payload } = action;\n  localStorage.setItem('state', JSON.stringify({ player: { ...state, ...payload } }));\n\n  switch (type) {\n  case PLAYER:\n    return {\n      name: payload.name,\n      gravatarEmail: payload.gravatarEmail,\n      assertions: payload.assertions,\n      score: payload.score,\n    };\n  case SCORE:\n    return {\n      ...state,\n      assertions: payload.assertions,\n      score: payload.score,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default player;\n","import { RANKING } from '../actions';\n\nconst INITIAL_STATE = [];\n\nconst ranking = (state = INITIAL_STATE, action) => {\n  const { type, payload } = action;\n  localStorage.setItem('ranking', JSON.stringify({ ...state, ...payload }));\n\n  switch (type) {\n  case RANKING:\n    return [\n      ...state,\n      {\n        name: payload.name,\n        score: payload.score,\n        picture: payload.picture,\n      }];\n  default:\n    return state;\n  }\n};\n\nexport default ranking;\n","import { SETTINGS } from '../actions';\r\n\r\nconst INITIAL_STATE = {\r\n  category: undefined,\r\n  quantity: undefined,\r\n  difficulty: undefined,\r\n};\r\n\r\nconst settings = (state = INITIAL_STATE, action) => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n  case SETTINGS:\r\n    return {\r\n      category: payload.category,\r\n      quantity: payload.quantity,\r\n      difficulty: payload.difficulty,\r\n    };\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nexport default settings;\r\n","import { combineReducers } from 'redux';\nimport player from './player';\nimport ranking from './ranking';\nimport settings from './settings';\n\nconst rootReducers = combineReducers({ player, settings, ranking });\n\nexport default rootReducers;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";"],"sourceRoot":""}